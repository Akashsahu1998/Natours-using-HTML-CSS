/*
It helps keep our code more organized; we can put the styles that all components should inherit here so that we can change them in only one place and have that change reflected across our entire page.
*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /* inherting the property from body selector */ }

html {
  /*
    We want to use the 10px but as we are setting it into the root so user can't able to change the size from the browser sertting, 
    so we can't restrct user from changing it, so we can set it to percentage, the default size is 16px and if we are giving 100%,
    then it will take completly 16px but we want here 10px wo we will take the division like 10/16 so we get 62.5% so we are going to use this.
    [(10*100)/16] = 62.5.
    1 rem = 10px;

    font-size: 10px;
   */
  font-size: 62.5%; }

body {
  box-sizing: border-box; }

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translate(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translate(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/*
The typography.scss file is meant to contain the general typography that affects our entire website, on which basis we can then introduce specific typographic variations in each component, which will then be part of that specific component.
*/
.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* to remove the shake in the animation */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* 
            animation-delay: 3s;
            animation-iteration-count: 3;
    
            Animation Timing Function Reference = https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function
         */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: 2px;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.u-center-text {
  text-align: center; }

.u-margin-bottom-8 {
  margin-bottom: 8rem; }

.btn:link, .btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem;
  transition: all 0.2s;
  position: relative;
  font-size: 1.6rem; }

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  /* direction(x or y), 10px direction(down) shadow, blurr(20 px), (Color) */
  /* In SASS only we can give the color into the RGBA otherwise in normal CSS we can't */ }
  .btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    /* Scale will increase the element */
    opacity: 0; }

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
  /* direction(x or y), 10px direction(down) shadow, blurr(20 px), (Color) */ }

.btn--white {
  background-color: #fff;
  color: #777; }
  .btn--white::after {
    background-color: #fff; }

.btn::after {
  content: "";
  display: inline-block;
  /* The btn is a inline element */
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s; }

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  /* (.75s) is  like a delay*/
  animation-fill-mode: backwards;
  /* This will just hide the button and automatically the style of 0% before the animation starts like a (opacity: 0;) */ }

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* clip path reference = https://bennettfeely.com/clippy */
  /* we can also hover on the element and can apply animation */ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__logo-box:hover .header__logo {
    animation: moveInRight 0.6s ease-in; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center; }

.row {
  max-width: 114rem;
  margin: 0 auto;
  /* "^" it means the class which is starting from "col-" in the whole html file, "*" which contains, "$" which contains in the last *, we can select the img, src, alt, link, anchor tag whose target attribute is blank  */ }
  .row:not(:last-child) {
    margin-bottom: 8rem;
    /*
        &:not = not pseudo selector means last child of row, except last child.
        (.row:last-child)
        bcz we dont want to apply the margin bottom on the last child
        */ }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2);
    /* with the help of calc(), we can mathematical operation and can make units */ }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - 3 * 6rem) / 4) + (2 * 6rem)); }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }
